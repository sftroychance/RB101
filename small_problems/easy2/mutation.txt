What will the following code print, and why? Don't run the code until you have tried to answer.

array1 = %w(Moe Larry Curly Shemp Harpo Chico Groucho Zeppo)
array2 = []
array1.each { |value| array2 << value }
array1.each { |value| value.upcase! if value.start_with?('C', 'S') }
puts array2

This will print:
Moe
Larry
Curly
Shemp
Harpo
Chico
Groucho
Zeppo

In the first array1.each statement, each value of array1 is concatenated to the initially empty array array2.

The second array1.each statement changes the values of some of the elements of array1 but does not affect array2.

WRONG!
It will print:
Moe
Larry
CURLY
SHEMP
Harpo
CHICO
Groucho
Zeppo

irb(main):007:0> array1.object_id
=> 260
irb(main):008:0> array2.object_id
=> 300
irb(main):009:0> array1[0].object_id
=> 320
irb(main):010:0> array2[0].object_id
=> 320

also:
irb(main):009:0> array1 = ['hi', 'there']
=> ["hi", "there"]
irb(main):010:0> array2 = array1
=> ["hi", "there"]
irb(main):011:0> array1[0].upcase!
=> "HI"
irb(main):012:0> array2
=> ["HI", "there"]

This is the equivalent of:

(0..(array1.size - 1).each do |idx|
  array2[idx] = array1[idx]
end

Forget that these are elements of an array; you are assigning a string to the address of another string, so any mutation of the initial string will be reflected in the new string.

This can be avoided by calling method .dup on the original value when passing it to array2:
array2 << value.dup

note:
array1 = array2 --> the arrays have the same object_id, but also each corresponding element of both arrays have the same object_id. but if you then reassign array1 to a new array, they will no longer be bound:

irb(main):001:0> array1 = [1, 2]
=> [1, 2]
irb(main):002:0> array2 = array1
=> [1, 2]
irb(main):003:0> array1.object_id
=> 260
irb(main):004:0> array2.object_id
=> 260
irb(main):005:0> array1[0].object_id
=> 3
irb(main):006:0> array2[0].object_id
=> 3
irb(main):007:0> array1 = [3, 4]
=> [3, 4]
irb(main):008:0> array2
=> [1, 2]
